=begin
#MF KESSAI API v2

#MF KESSAI REST API

The version of the OpenAPI document: 0.2.0
Contact: support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'cgi'

module OpenapiClient
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 顧客を登録することができます。顧客には必ず一つの請求先が必要であるため同時に請求先一件も登録します。
    # 顧客登録
    # @param payload [CustomerPayload] 顧客登録情報です。請求先情報も含まれています。
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def create_customer(payload, opts = {})
      data, _status_code, _headers = create_customer_with_http_info(payload, opts)
      data
    end

    # 顧客を登録することができます。顧客には必ず一つの請求先が必要であるため同時に請求先一件も登録します。
    # 顧客登録
    # @param payload [CustomerPayload] 顧客登録情報です。請求先情報も含まれています。
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def create_customer_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create_customer ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling CustomerApi.create_customer"
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(payload) 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['apikey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客IDを指定して対象顧客１件を取得することができます。
    # 顧客取得
    # @param customer_id [String] 対象の顧客IDを指定してください。
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # 顧客IDを指定して対象顧客１件を取得することができます。
    # 顧客取得
    # @param customer_id [String] 対象の顧客IDを指定してください。
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.get_customer"
      end
      # resource path
      local_var_path = '/customers/{customer_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['apikey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 顧客の一覧を取得することができます。顧客番号や支払方法、未入金の有無で絞り込んで取得することもできます。
    # 顧客一覧取得
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number 任意の顧客の &#x60;number&#x60;を指定します。該当する顧客がいる場合、その一件のみが返却されます。
    # @option opts [Array<String>] :payment_method 支払方法を指定します。該当する支払方法の顧客が返却されます。指定できる値は &#x60;bank_transfer&#x60;(銀行振込), &#x60;account_transfer&#x60;(口座振替)の２種類のみです。支払方法は複数指定することができます。 複数指定する場合は&#x60;?payment_method&#x3D;bank_transfer&amp;payment_method&#x3D;account_transfer&#x60;のように指定してください。
    # @option opts [Boolean] :has_alert アラートの有無をboolean値で指定します。&#x60;true&#x60;の場合アラート有り、&#x60;false&#x60;の場合はアラート無しを表します。
    # @option opts [DateTime] :created_at_from 指定された日時以降に作成された顧客を取得します。指定された日時に作成されたものも含まれます。 RFC3399の&#x60;date-time&#x60;(2019-04-01T10:36:43+09:00)で指定してください。
    # @option opts [DateTime] :created_at_to 指定された日時以前に作成された顧客を取得します。指定された日時に作成されたものも含まれます。 RFC3399の&#x60;date-time&#x60;(2019-04-01T10:36:43+09:00)で指定してください。
    # @option opts [String] :after 任意のリソースIDを指定します。追加日時の降順でこのIDのリソースよりも後のリソースを取得します。この時&#x60;after&#x60;で指定したIDのリソースは結果に含まれません。
    # @option opts [String] :before 任意のリソースIDを指定します。追加日時の降順でこのIDのリソースよりも前のリソースを取得します。この時&#x60;before&#x60;で指定したIDのリソースは結果に含まれません。
    # @option opts [Integer] :limit 取得したいリソースの最大件数を指定します。1~200の間の整数で指定してください。指定がない場合は20になります。
    # @return [InlineResponse200]
    def get_customers_list(opts = {})
      data, _status_code, _headers = get_customers_list_with_http_info(opts)
      data
    end

    # 顧客の一覧を取得することができます。顧客番号や支払方法、未入金の有無で絞り込んで取得することもできます。
    # 顧客一覧取得
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number 任意の顧客の &#x60;number&#x60;を指定します。該当する顧客がいる場合、その一件のみが返却されます。
    # @option opts [Array<String>] :payment_method 支払方法を指定します。該当する支払方法の顧客が返却されます。指定できる値は &#x60;bank_transfer&#x60;(銀行振込), &#x60;account_transfer&#x60;(口座振替)の２種類のみです。支払方法は複数指定することができます。 複数指定する場合は&#x60;?payment_method&#x3D;bank_transfer&amp;payment_method&#x3D;account_transfer&#x60;のように指定してください。
    # @option opts [Boolean] :has_alert アラートの有無をboolean値で指定します。&#x60;true&#x60;の場合アラート有り、&#x60;false&#x60;の場合はアラート無しを表します。
    # @option opts [DateTime] :created_at_from 指定された日時以降に作成された顧客を取得します。指定された日時に作成されたものも含まれます。 RFC3399の&#x60;date-time&#x60;(2019-04-01T10:36:43+09:00)で指定してください。
    # @option opts [DateTime] :created_at_to 指定された日時以前に作成された顧客を取得します。指定された日時に作成されたものも含まれます。 RFC3399の&#x60;date-time&#x60;(2019-04-01T10:36:43+09:00)で指定してください。
    # @option opts [String] :after 任意のリソースIDを指定します。追加日時の降順でこのIDのリソースよりも後のリソースを取得します。この時&#x60;after&#x60;で指定したIDのリソースは結果に含まれません。
    # @option opts [String] :before 任意のリソースIDを指定します。追加日時の降順でこのIDのリソースよりも前のリソースを取得します。この時&#x60;before&#x60;で指定したIDのリソースは結果に含まれません。
    # @option opts [Integer] :limit 取得したいリソースの最大件数を指定します。1~200の間の整数で指定してください。指定がない場合は20になります。
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_customers_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_customers_list ...'
      end
      allowable_values = ["bank_transfer", "account_transfer"]
      if @api_client.config.client_side_validation && opts[:'payment_method'] && !opts[:'payment_method'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"payment_method\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomerApi.get_customers_list, must be smaller than or equal to 200.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomerApi.get_customers_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'payment_method'] = @api_client.build_collection_param(opts[:'payment_method'], :csv) if !opts[:'payment_method'].nil?
      query_params[:'has_alert'] = opts[:'has_alert'] if !opts[:'has_alert'].nil?
      query_params[:'created_at_from'] = opts[:'created_at_from'] if !opts[:'created_at_from'].nil?
      query_params[:'created_at_to'] = opts[:'created_at_to'] if !opts[:'created_at_to'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || ['apikey']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customers_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
