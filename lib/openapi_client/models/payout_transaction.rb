=begin
#MF KESSAI API v2

#MF KESSAI REST API

The version of the OpenAPI document: 0.2.0
Contact: support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module OpenapiClient
  # 売り手様へ振込に紐づく債権です。
  class PayoutTransaction
    # 債権譲受日時です。
    attr_accessor :accepted_at

    # 債権金額です。
    attr_accessor :amount

    # 手数料の金額です。
    attr_accessor :commission_amount

    # 手数料率です。
    attr_accessor :commission_rate

    # 早期振込手数料です。
    attr_accessor :early_payout_commission_amount

    # 早期振込手数料率です。
    attr_accessor :early_payout_commission_rate

    # 債権IDです。一意の識別子として自動で付与されます。
    attr_accessor :id

    # このObjectの種別を示します。ここでは必ず`payout_transaction`が入ります。
    attr_accessor :object

    # 振込予定日です。早期振込の場合、`standard_payout_date`よりも早くなります。
    attr_accessor :payout_date

    # 債権が含まれる振込のIDです。
    attr_accessor :payout_id

    # 通常の振込予定日です。
    attr_accessor :standard_payout_date

    # 取引IDです。この債権が紐づく取引を示します。
    attr_accessor :transaction_id

    # 債権URIです。すべてのリソースで一意の識別子として自動で付与されます。
    attr_accessor :uri

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accepted_at' => :'accepted_at',
        :'amount' => :'amount',
        :'commission_amount' => :'commission_amount',
        :'commission_rate' => :'commission_rate',
        :'early_payout_commission_amount' => :'early_payout_commission_amount',
        :'early_payout_commission_rate' => :'early_payout_commission_rate',
        :'id' => :'id',
        :'object' => :'object',
        :'payout_date' => :'payout_date',
        :'payout_id' => :'payout_id',
        :'standard_payout_date' => :'standard_payout_date',
        :'transaction_id' => :'transaction_id',
        :'uri' => :'uri'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'accepted_at' => :'DateTime',
        :'amount' => :'Integer',
        :'commission_amount' => :'Integer',
        :'commission_rate' => :'Float',
        :'early_payout_commission_amount' => :'Integer',
        :'early_payout_commission_rate' => :'Float',
        :'id' => :'String',
        :'object' => :'String',
        :'payout_date' => :'Date',
        :'payout_id' => :'String',
        :'standard_payout_date' => :'Date',
        :'transaction_id' => :'String',
        :'uri' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PayoutTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PayoutTransaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'accepted_at')
        self.accepted_at = attributes[:'accepted_at']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'commission_amount')
        self.commission_amount = attributes[:'commission_amount']
      end

      if attributes.key?(:'commission_rate')
        self.commission_rate = attributes[:'commission_rate']
      end

      if attributes.key?(:'early_payout_commission_amount')
        self.early_payout_commission_amount = attributes[:'early_payout_commission_amount']
      end

      if attributes.key?(:'early_payout_commission_rate')
        self.early_payout_commission_rate = attributes[:'early_payout_commission_rate']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'payout_date')
        self.payout_date = attributes[:'payout_date']
      end

      if attributes.key?(:'payout_id')
        self.payout_id = attributes[:'payout_id']
      end

      if attributes.key?(:'standard_payout_date')
        self.standard_payout_date = attributes[:'standard_payout_date']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'uri')
        self.uri = attributes[:'uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount > 2147483647
        invalid_properties.push('invalid value for "amount", must be smaller than or equal to 2147483647.')
      end

      if !@amount.nil? && @amount < 0
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 0.')
      end

      if !@commission_amount.nil? && @commission_amount > 2147483647
        invalid_properties.push('invalid value for "commission_amount", must be smaller than or equal to 2147483647.')
      end

      if !@commission_amount.nil? && @commission_amount < 0
        invalid_properties.push('invalid value for "commission_amount", must be greater than or equal to 0.')
      end

      if !@commission_rate.nil? && @commission_rate > 1E+2
        invalid_properties.push('invalid value for "commission_rate", must be smaller than or equal to 1E+2.')
      end

      if !@commission_rate.nil? && @commission_rate < 0
        invalid_properties.push('invalid value for "commission_rate", must be greater than or equal to 0.')
      end

      if !@early_payout_commission_amount.nil? && @early_payout_commission_amount > 2147483647
        invalid_properties.push('invalid value for "early_payout_commission_amount", must be smaller than or equal to 2147483647.')
      end

      if !@early_payout_commission_amount.nil? && @early_payout_commission_amount < 0
        invalid_properties.push('invalid value for "early_payout_commission_amount", must be greater than or equal to 0.')
      end

      if !@early_payout_commission_rate.nil? && @early_payout_commission_rate > 1E+2
        invalid_properties.push('invalid value for "early_payout_commission_rate", must be smaller than or equal to 1E+2.')
      end

      if !@early_payout_commission_rate.nil? && @early_payout_commission_rate < 0
        invalid_properties.push('invalid value for "early_payout_commission_rate", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount > 2147483647
      return false if !@amount.nil? && @amount < 0
      return false if !@commission_amount.nil? && @commission_amount > 2147483647
      return false if !@commission_amount.nil? && @commission_amount < 0
      return false if !@commission_rate.nil? && @commission_rate > 1E+2
      return false if !@commission_rate.nil? && @commission_rate < 0
      return false if !@early_payout_commission_amount.nil? && @early_payout_commission_amount > 2147483647
      return false if !@early_payout_commission_amount.nil? && @early_payout_commission_amount < 0
      return false if !@early_payout_commission_rate.nil? && @early_payout_commission_rate > 1E+2
      return false if !@early_payout_commission_rate.nil? && @early_payout_commission_rate < 0
      object_validator = EnumAttributeValidator.new('String', ["payout_transaction"])
      return false unless object_validator.valid?(@object)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount > 2147483647
        fail ArgumentError, 'invalid value for "amount", must be smaller than or equal to 2147483647.'
      end

      if !amount.nil? && amount < 0
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 0.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_amount Value to be assigned
    def commission_amount=(commission_amount)
      if !commission_amount.nil? && commission_amount > 2147483647
        fail ArgumentError, 'invalid value for "commission_amount", must be smaller than or equal to 2147483647.'
      end

      if !commission_amount.nil? && commission_amount < 0
        fail ArgumentError, 'invalid value for "commission_amount", must be greater than or equal to 0.'
      end

      @commission_amount = commission_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_rate Value to be assigned
    def commission_rate=(commission_rate)
      if !commission_rate.nil? && commission_rate > 1E+2
        fail ArgumentError, 'invalid value for "commission_rate", must be smaller than or equal to 1E+2.'
      end

      if !commission_rate.nil? && commission_rate < 0
        fail ArgumentError, 'invalid value for "commission_rate", must be greater than or equal to 0.'
      end

      @commission_rate = commission_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] early_payout_commission_amount Value to be assigned
    def early_payout_commission_amount=(early_payout_commission_amount)
      if !early_payout_commission_amount.nil? && early_payout_commission_amount > 2147483647
        fail ArgumentError, 'invalid value for "early_payout_commission_amount", must be smaller than or equal to 2147483647.'
      end

      if !early_payout_commission_amount.nil? && early_payout_commission_amount < 0
        fail ArgumentError, 'invalid value for "early_payout_commission_amount", must be greater than or equal to 0.'
      end

      @early_payout_commission_amount = early_payout_commission_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] early_payout_commission_rate Value to be assigned
    def early_payout_commission_rate=(early_payout_commission_rate)
      if !early_payout_commission_rate.nil? && early_payout_commission_rate > 1E+2
        fail ArgumentError, 'invalid value for "early_payout_commission_rate", must be smaller than or equal to 1E+2.'
      end

      if !early_payout_commission_rate.nil? && early_payout_commission_rate < 0
        fail ArgumentError, 'invalid value for "early_payout_commission_rate", must be greater than or equal to 0.'
      end

      @early_payout_commission_rate = early_payout_commission_rate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["payout_transaction"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accepted_at == o.accepted_at &&
          amount == o.amount &&
          commission_amount == o.commission_amount &&
          commission_rate == o.commission_rate &&
          early_payout_commission_amount == o.early_payout_commission_amount &&
          early_payout_commission_rate == o.early_payout_commission_rate &&
          id == o.id &&
          object == o.object &&
          payout_date == o.payout_date &&
          payout_id == o.payout_id &&
          standard_payout_date == o.standard_payout_date &&
          transaction_id == o.transaction_id &&
          uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [accepted_at, amount, commission_amount, commission_rate, early_payout_commission_amount, early_payout_commission_rate, id, object, payout_date, payout_id, standard_payout_date, transaction_id, uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
