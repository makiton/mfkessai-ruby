=begin
#MF KESSAI API v2

#MF KESSAI REST API

The version of the OpenAPI document: 0.2.0
Contact: support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module OpenapiClient
  # 顧客審査申請情報です。顧客審査申請で利用します
  class CustomerPayloadCustomerExamination
    # 希望与信額です。審査通過の場合に付与される与信枠の金額になります。現在与信枠が適用中の場合は、その与信額以下の金額は指定できません。0円を指定した場合は無視されます。
    attr_accessor :amount

    # 事業内容です。顧客の主なサービス、商材などを記載してください。
    attr_accessor :business_description

    # 事業所区分です。法人(`corporate`)または、個人(`individual`)で指定してください。不明な場合は空にしてください。
    attr_accessor :business_type

    # 法人番号です。事業所区分(`business_type`)が法人(`corporate`)の場合にのみ指定してください。
    attr_accessor :corporate_number

    # 顧客審査に利用できるその他情報を記載できます。
    attr_accessor :remark

    # 代表者氏名です。
    attr_accessor :representative_name

    # 顧客企業のwebサイトです。
    attr_accessor :website

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'business_description' => :'business_description',
        :'business_type' => :'business_type',
        :'corporate_number' => :'corporate_number',
        :'remark' => :'remark',
        :'representative_name' => :'representative_name',
        :'website' => :'website'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Integer',
        :'business_description' => :'String',
        :'business_type' => :'String',
        :'corporate_number' => :'String',
        :'remark' => :'String',
        :'representative_name' => :'String',
        :'website' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CustomerPayloadCustomerExamination` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CustomerPayloadCustomerExamination`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'business_description')
        self.business_description = attributes[:'business_description']
      end

      if attributes.key?(:'business_type')
        self.business_type = attributes[:'business_type']
      end

      if attributes.key?(:'corporate_number')
        self.corporate_number = attributes[:'corporate_number']
      end

      if attributes.key?(:'remark')
        self.remark = attributes[:'remark']
      end

      if attributes.key?(:'representative_name')
        self.representative_name = attributes[:'representative_name']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount > 10000000
        invalid_properties.push('invalid value for "amount", must be smaller than or equal to 10000000.')
      end

      if !@amount.nil? && @amount < 1
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 1.')
      end

      if !@business_description.nil? && @business_description.to_s.length > 500
        invalid_properties.push('invalid value for "business_description", the character length must be smaller than or equal to 500.')
      end

      pattern = Regexp.new(/^\d{13}$/)
      if !@corporate_number.nil? && @corporate_number !~ pattern
        invalid_properties.push("invalid value for \"corporate_number\", must conform to the pattern #{pattern}.")
      end

      if !@remark.nil? && @remark.to_s.length > 500
        invalid_properties.push('invalid value for "remark", the character length must be smaller than or equal to 500.')
      end

      if !@representative_name.nil? && @representative_name.to_s.length > 30
        invalid_properties.push('invalid value for "representative_name", the character length must be smaller than or equal to 30.')
      end

      if !@website.nil? && @website.to_s.length > 500
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 500.')
      end

      pattern = Regexp.new(/^(http:\/\/www.|https:\/\/www.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/)
      if !@website.nil? && @website !~ pattern
        invalid_properties.push("invalid value for \"website\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount > 10000000
      return false if !@amount.nil? && @amount < 1
      return false if !@business_description.nil? && @business_description.to_s.length > 500
      business_type_validator = EnumAttributeValidator.new('String', ["corporate", "individual"])
      return false unless business_type_validator.valid?(@business_type)
      return false if !@corporate_number.nil? && @corporate_number !~ Regexp.new(/^\d{13}$/)
      return false if !@remark.nil? && @remark.to_s.length > 500
      return false if !@representative_name.nil? && @representative_name.to_s.length > 30
      return false if !@website.nil? && @website.to_s.length > 500
      return false if !@website.nil? && @website !~ Regexp.new(/^(http:\/\/www.|https:\/\/www.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount > 10000000
        fail ArgumentError, 'invalid value for "amount", must be smaller than or equal to 10000000.'
      end

      if !amount.nil? && amount < 1
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 1.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] business_description Value to be assigned
    def business_description=(business_description)
      if !business_description.nil? && business_description.to_s.length > 500
        fail ArgumentError, 'invalid value for "business_description", the character length must be smaller than or equal to 500.'
      end

      @business_description = business_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_type Object to be assigned
    def business_type=(business_type)
      validator = EnumAttributeValidator.new('String', ["corporate", "individual"])
      unless validator.valid?(business_type)
        fail ArgumentError, "invalid value for \"business_type\", must be one of #{validator.allowable_values}."
      end
      @business_type = business_type
    end

    # Custom attribute writer method with validation
    # @param [Object] corporate_number Value to be assigned
    def corporate_number=(corporate_number)
      pattern = Regexp.new(/^\d{13}$/)
      if !corporate_number.nil? && corporate_number !~ pattern
        fail ArgumentError, "invalid value for \"corporate_number\", must conform to the pattern #{pattern}."
      end

      @corporate_number = corporate_number
    end

    # Custom attribute writer method with validation
    # @param [Object] remark Value to be assigned
    def remark=(remark)
      if !remark.nil? && remark.to_s.length > 500
        fail ArgumentError, 'invalid value for "remark", the character length must be smaller than or equal to 500.'
      end

      @remark = remark
    end

    # Custom attribute writer method with validation
    # @param [Object] representative_name Value to be assigned
    def representative_name=(representative_name)
      if !representative_name.nil? && representative_name.to_s.length > 30
        fail ArgumentError, 'invalid value for "representative_name", the character length must be smaller than or equal to 30.'
      end

      @representative_name = representative_name
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if !website.nil? && website.to_s.length > 500
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 500.'
      end

      pattern = Regexp.new(/^(http:\/\/www.|https:\/\/www.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/)
      if !website.nil? && website !~ pattern
        fail ArgumentError, "invalid value for \"website\", must conform to the pattern #{pattern}."
      end

      @website = website
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          business_description == o.business_description &&
          business_type == o.business_type &&
          corporate_number == o.corporate_number &&
          remark == o.remark &&
          representative_name == o.representative_name &&
          website == o.website
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, business_description, business_type, corporate_number, remark, representative_name, website].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
