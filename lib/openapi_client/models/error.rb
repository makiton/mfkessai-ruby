=begin
#MF KESSAI API v2

#MF KESSAI REST API

The version of the OpenAPI document: 0.2.0
Contact: support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module OpenapiClient
  # エラー内容の詳細です。4xxのエラーコードとともに返却されます。
  class Error
    # エラーコードです。それぞれの説明については、[エラーコード](https://mfkessai.co.jp/developer/v2/docs/#error_codes)を参照してください。
    attr_accessor :code

    # エラー発生原因に関する情報です。
    attr_accessor :message

    # 何らかの値に関連するエラーの場合その値が入ります。
    attr_accessor :param

    # エラー種別です。
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'message' => :'message',
        :'param' => :'param',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'message' => :'String',
        :'param' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Error` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Error`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'param')
        self.param = attributes[:'param']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      code_validator = EnumAttributeValidator.new('String', ["not_found", "request_canceled", "already_exists", "invalid_json_format", "invalid_after", "invalid_before", "invalid_limit", "out_of_range_by_after", "out_of_range_by_before", "invalid_amount_per_tax_rate_type_amount", "invalid_amount_per_tax_rate_type_tax_rate_type", "invalid_created_at_from", "invalid_created_at_to", "invalid_customer_destination", "invalid_customer_has_alert", "invalid_customer_id", "invalid_customer_name", "invalid_customer_number", "invalid_customer_payment_method", "invalid_destination_address1", "invalid_destination_address2", "invalid_destination_cc_emails", "invalid_destination_department", "invalid_destination_email", "invalid_destination_id", "invalid_destination_name", "invalid_destination_name_kana", "invalid_destination_tel", "invalid_destination_title", "invalid_destination_zip_code", "invalid_customer_examination_id", "invalid_customer_examination_address1", "invalid_customer_examination_address2", "invalid_customer_examination_amount", "invalid_customer_examination_amount_with_balance", "invalid_customer_examination_business_description", "invalid_customer_examination_business_type", "invalid_customer_examination_corporate_number", "invalid_customer_examination_email", "invalid_customer_examination_end_date", "invalid_customer_examination_remark", "invalid_customer_examination_representative_name", "invalid_customer_examination_status", "invalid_customer_examination_tel", "invalid_customer_examination_website", "invalid_customer_examination_zip_code", "invalid_credit_facility_end_date_from", "invalid_credit_facility_end_date_to", "invalid_credit_facility_id", "invalid_credit_facility_start_date_from", "invalid_credit_facility_start_date_to", "invalid_transaction_amount", "invalid_transaction_amounts_per_tax_rate_type", "invalid_transaction_details", "invalid_transaction_detail_amount", "invalid_transaction_detail_description", "invalid_transaction_detail_quantity", "invalid_transaction_detail_tax_included_type", "invalid_transaction_detail_tax_rate_type", "invalid_transaction_detail_unit_price", "invalid_transaction_date", "invalid_transaction_date_from", "invalid_transaction_date_to", "invalid_transaction_due_date", "invalid_transaction_duplicate_invoice_delivery_method", "invalid_transaction_invoice_delivery_methods", "invalid_transaction_issue_date", "invalid_transaction_id", "invalid_transaction_number", "invalid_transaction_status", "not_cancelable_transaction_status", "invalid_billing_due_date_from", "invalid_billing_due_date_to", "invalid_billing_id", "invalid_billing_issue_date_from", "invalid_billing_issue_date_to", "invalid_billing_status", "invalid_billing_unpaid", "invalid_payout_date_from", "invalid_payout_date_to", "invalid_payout_id", "invalid_payout_status", "invalid_payout_transaction_id"])
      return false unless code_validator.valid?(@code)
      type_validator = EnumAttributeValidator.new('String', ["already_exisits_error", "conflict_operation_error", "invalid_argument_error", "not_found_error", "rate_limit_error", "request_canceled"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code Object to be assigned
    def code=(code)
      validator = EnumAttributeValidator.new('String', ["not_found", "request_canceled", "already_exists", "invalid_json_format", "invalid_after", "invalid_before", "invalid_limit", "out_of_range_by_after", "out_of_range_by_before", "invalid_amount_per_tax_rate_type_amount", "invalid_amount_per_tax_rate_type_tax_rate_type", "invalid_created_at_from", "invalid_created_at_to", "invalid_customer_destination", "invalid_customer_has_alert", "invalid_customer_id", "invalid_customer_name", "invalid_customer_number", "invalid_customer_payment_method", "invalid_destination_address1", "invalid_destination_address2", "invalid_destination_cc_emails", "invalid_destination_department", "invalid_destination_email", "invalid_destination_id", "invalid_destination_name", "invalid_destination_name_kana", "invalid_destination_tel", "invalid_destination_title", "invalid_destination_zip_code", "invalid_customer_examination_id", "invalid_customer_examination_address1", "invalid_customer_examination_address2", "invalid_customer_examination_amount", "invalid_customer_examination_amount_with_balance", "invalid_customer_examination_business_description", "invalid_customer_examination_business_type", "invalid_customer_examination_corporate_number", "invalid_customer_examination_email", "invalid_customer_examination_end_date", "invalid_customer_examination_remark", "invalid_customer_examination_representative_name", "invalid_customer_examination_status", "invalid_customer_examination_tel", "invalid_customer_examination_website", "invalid_customer_examination_zip_code", "invalid_credit_facility_end_date_from", "invalid_credit_facility_end_date_to", "invalid_credit_facility_id", "invalid_credit_facility_start_date_from", "invalid_credit_facility_start_date_to", "invalid_transaction_amount", "invalid_transaction_amounts_per_tax_rate_type", "invalid_transaction_details", "invalid_transaction_detail_amount", "invalid_transaction_detail_description", "invalid_transaction_detail_quantity", "invalid_transaction_detail_tax_included_type", "invalid_transaction_detail_tax_rate_type", "invalid_transaction_detail_unit_price", "invalid_transaction_date", "invalid_transaction_date_from", "invalid_transaction_date_to", "invalid_transaction_due_date", "invalid_transaction_duplicate_invoice_delivery_method", "invalid_transaction_invoice_delivery_methods", "invalid_transaction_issue_date", "invalid_transaction_id", "invalid_transaction_number", "invalid_transaction_status", "not_cancelable_transaction_status", "invalid_billing_due_date_from", "invalid_billing_due_date_to", "invalid_billing_id", "invalid_billing_issue_date_from", "invalid_billing_issue_date_to", "invalid_billing_status", "invalid_billing_unpaid", "invalid_payout_date_from", "invalid_payout_date_to", "invalid_payout_id", "invalid_payout_status", "invalid_payout_transaction_id"])
      unless validator.valid?(code)
        fail ArgumentError, "invalid value for \"code\", must be one of #{validator.allowable_values}."
      end
      @code = code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["already_exisits_error", "conflict_operation_error", "invalid_argument_error", "not_found_error", "rate_limit_error", "request_canceled"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          message == o.message &&
          param == o.param &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, message, param, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
