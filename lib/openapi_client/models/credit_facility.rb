=begin
#MF KESSAI API v2

#MF KESSAI REST API

The version of the OpenAPI document: 0.2.0
Contact: support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module OpenapiClient
  # 顧客の与信枠です。この枠内の取引登録であれば取引審査なしで登録することができます。
  class CreditFacility
    # 与信額です。取引登録期間(`start_date`~`end_date`)にこの金額までの取引であれば取引審査なしで登録することができます。
    attr_accessor :amount

    # 与信額残高です。与信額からこの与信枠を利用して登録された取引の合計金額を差し引いた金額です。現在与信枠を利用して登録できる取引金額を示しています。
    attr_accessor :balance

    # 顧客IDです。一意の識別子として自動で付与されます。
    attr_accessor :customer_id

    # 顧客審査IDです。
    attr_accessor :customer_examination_id

    # 取引登録期間終了日です。この日付まで対象の与信枠を利用して取引登録ができます。
    attr_accessor :end_date

    # 与信枠IDです。一意の識別子として自動で付与されます。
    attr_accessor :id

    # このObjectの種別を示します。ここでは必ず`credit_facility`が入ります。
    attr_accessor :object

    # 取引登録期間開始日です。この日付から対象の与信枠を利用して取引登録ができます。
    attr_accessor :start_date

    # 与信枠ステータスです。未適用(`inactive`)、適用中(`active`)、期限切れ(`expired`)があります。 現在の日付が`start_date`~`end_date`の期間内であれば`active`、`start_date`よりも前であれば`inactive`、`end_date`を過ぎていれば`expired`になります。
    attr_accessor :status

    # 与信枠URIです。すべてのリソースで一意の識別子として自動で付与されます。
    attr_accessor :uri

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'balance' => :'balance',
        :'customer_id' => :'customer_id',
        :'customer_examination_id' => :'customer_examination_id',
        :'end_date' => :'end_date',
        :'id' => :'id',
        :'object' => :'object',
        :'start_date' => :'start_date',
        :'status' => :'status',
        :'uri' => :'uri'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Integer',
        :'balance' => :'Integer',
        :'customer_id' => :'String',
        :'customer_examination_id' => :'String',
        :'end_date' => :'Date',
        :'id' => :'String',
        :'object' => :'String',
        :'start_date' => :'Date',
        :'status' => :'String',
        :'uri' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CreditFacility` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CreditFacility`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_examination_id')
        self.customer_examination_id = attributes[:'customer_examination_id']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'uri')
        self.uri = attributes[:'uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount > 10000000
        invalid_properties.push('invalid value for "amount", must be smaller than or equal to 10000000.')
      end

      if !@amount.nil? && @amount < 1
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 1.')
      end

      if !@balance.nil? && @balance > 10000000
        invalid_properties.push('invalid value for "balance", must be smaller than or equal to 10000000.')
      end

      if !@balance.nil? && @balance < 0
        invalid_properties.push('invalid value for "balance", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount > 10000000
      return false if !@amount.nil? && @amount < 1
      return false if !@balance.nil? && @balance > 10000000
      return false if !@balance.nil? && @balance < 0
      object_validator = EnumAttributeValidator.new('String', ["credit_facility"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new('String', ["inactive", "active", "expired"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount > 10000000
        fail ArgumentError, 'invalid value for "amount", must be smaller than or equal to 10000000.'
      end

      if !amount.nil? && amount < 1
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 1.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] balance Value to be assigned
    def balance=(balance)
      if !balance.nil? && balance > 10000000
        fail ArgumentError, 'invalid value for "balance", must be smaller than or equal to 10000000.'
      end

      if !balance.nil? && balance < 0
        fail ArgumentError, 'invalid value for "balance", must be greater than or equal to 0.'
      end

      @balance = balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["credit_facility"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["inactive", "active", "expired"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          balance == o.balance &&
          customer_id == o.customer_id &&
          customer_examination_id == o.customer_examination_id &&
          end_date == o.end_date &&
          id == o.id &&
          object == o.object &&
          start_date == o.start_date &&
          status == o.status &&
          uri == o.uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, balance, customer_id, customer_examination_id, end_date, id, object, start_date, status, uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
